---
title: "Topology meets the real world"
subtitle: "How geometry can help us analyse finite metric spaces"
project:
  output-dir: docs
author: "Guilherme Vituri F. Pinto*, Laura R. Gambera**"
institute: |
  *Head of Intelligence at Argus Solutions
  
  **Data Scientist at Argus Solutions
  
bibliography: references.bib

format: 
    revealjs:
        preview-links: true
        scrollable: true
        theme: dark
        footer: ""
        logo: logo.png
        chalkboard: true
        transition: slide
        transition-speed: fast
        self-contained: false
        incremental: true
        auto-animate: true
    pptx: default
---

```{r, include=FALSE}

library(vituripackage)
```

## Data in the wild

In many cases, real world datasets are **tables** and can be seen as a finite space $X \subset \mathbb{R}^n$ for some $n$, with some choice of metric to it.


```{r, background='white', fig.align='center'}
iris |> select(-Species) |> head(10) #|> reactable::reactable()
```

## Value from data

Means and percentage are cool, but we need more!

- Detect trendings and cycles in data;

- Correlations, causation and ways to avoid what is "bad" or maximize what is "good";

- Data science as a detective job;

- Example: why drivers sleep more on Thursday?

## Insights from topology

:::: {.columns}

::: {.column width="60%"}
![](images/dataset1.png)
:::

::: {.column width="40%"}

- discrete space;

- 1700 connected components;

- trivial $H_n$ for $n > 0$;

- call it a day and go to sleep.

:::

::::

##  {background-image="images/baby.jpg" background-size="contain" footer=false}

## Topology meets the real world

**Topological Data Analysis** builds bridges

<center>
topological spaces => finite datasets:
</center>

- Homology => persistent homology;

- Reeb graph => mapper graph;

- Connected components => single-linkage clustering.

# Problem 1: clustering

**Objective**: partition a dataset into "useful" groups of points. 

An analog for "connectivity" in the discrete case.

##  {background-image="images/cluster-comparison1.png" background-size="contain"}

##  {background-image="images/cluster-comparison2.png" background-size="contain"}

##  {background-image="images/cluster-comparison3.png" background-size="contain"}

##  {background-image="images/cluster-comparison.png" background-size="contain"}

<!-- ## Connectivity in topology -->

<!-- A space $X$ can be: -->

<!-- - Connected... -->

<!-- - Path-connected...... -->

<!-- - Arcwise-connected......... -->

<!-- - Simply connected............ -->

<!-- - $n$-connected............... -->

<!-- - Locally connected.................. -->

<!-- - Locally path-connected..................... -->

## Getting started {.smaller}

:::: {.columns}

::: {.column width="60%"}
![](images/dataset1.png)
:::

::: {.column width="40%" }

- $x_1$ and $x_2$ are measurements of something (facial features, temperature and pressure, etc.);

- small error are usual;

- the "true" value is in the center;

- the "true" value is closer to the other values than "false" values.
:::

::::

## The ToMATo clustering algorithm

In [@tomato], the authors define the ToMATo algorithm. The intuition is the following:

## The ToMATo clustering algorithm

::: {layout-ncol=2}
![Find poins in the most dense regions](images/tomato-guess.png)

![Build the perimeter](images/tomato-guess2.png)
:::

## Step 1

Calculate a density estimator

![](images/tomato2.png){fig-align="center"}

## Plot the mountains

![](images/tomato3.png){fig-align="center"}

## Step 2

Create a proximity graph

![](images/tomato4.png){fig-align="center"}

## Step 3

Chop the mountains! 

Reindex $x_1, ..., x_n \in X$ from highest to lowest. 

Start with $x = x_1$.

```
If no neighbor of $x$ is higher than $x$, then $x$ form a cluster $c_1$

otherwise

$x$ will be assigned to the cluster of its highest neighbor.
```

Keep going until all $x \in X$ is assigned to a cluster.

## :(

![](images/tomato5.png){fig-align="center"}

## False peaks

Use a parameter $\tau$ that will merge small peaks. 

How? See [@tomato]!!

## Final result

![](images/tomato6.png){fig-align="center"}

## Changing parameters

![](images/tomato7.png){fig-align="center"}

## ToMATo: two spirals with noise

##  {background-image="images/spiral1.png" background-size="contain"}

##  {background-image="images/spiral2.png" background-size="contain"}

##  {background-image="images/spiral3.png" background-size="contain"}

##  {background-image="images/spiral4.png" background-size="contain"}

## ToMATo: several components with noise

## {background-image="images/toy1.png" background-size="contain"}

## {background-image="images/toy2.png" background-size="contain"}

## {background-image="images/toy3.png" background-size="contain"}

## {background-image="images/toy4.png" background-size="contain"}




# Problem 2: signatures

**Objective**: given a complicated object $X$, create a simpler object $S(X)$ which can give information about $X$.

Example: $X$ and $Y$ are hard to compare, but $S(X) \neq S(Y)$ implies $X \neq Y$. 

Think of $S$ as a functor!

# Problem 3: dimensionality reduction

**Objective**: See what can't be seen!

Given a high-dimensional dataset $X$, how can we visualize it while keeping some of its structure?

## Reeb graph

:::: {.columns}

::: {.column width="55%"}

![](images/reeb.png){width=100%}
:::

::: {.column width="45%"}

Given a topological space $X$ and a map $f: X \to \mathbb{R}$, define $\sim$ on $X$ such that

$$
p \sim q \Leftrightarrow
  \text{$p, q \in f^{-1}(c)$} \\ \text{for some $c \in \mathbb{R}$.}
$$
 
The Reeb Graph of $(X, f)$ is the quotient $X / \sim$
:::
::::

## From infinite to finite

To adapt the Reeb graph to the finite case, we need to change:

- $X$ topological space => $(X, d)$ finite metric space;
- $f: X \to \mathbb{R}$ continuous => $f: X \to \mathbb{R}$ any function;
- inverse images of *points* of $\mathbb{R}$ => inverse images of *intervals* of $\mathbb{R}$;
- connected components of $X$ => clusters of $X$.

## The Mapper graph
:::: {.columns}
::: {.column width="50%"}
![](images/mapper1.png){width=90%}
:::
::: {.column width="50%" .nonincremental}
1) Define $f: X \to \mathbb{R}$;
:::
::::

## The Mapper graph
:::: {.columns}
::: {.column width="50%"}
![](images/mapper2.png){width=70%}
:::
::: {.column width="50%" .nonincremental}
1) Define $f: X \to \mathbb{R}$;

2) Choose a interval covering of $f(X)$;
:::
::::

## The Mapper graph
:::: {.columns}
::: {.column width="50%"}
![](images/mapper3.png){width=70%}
:::
::: {.column width="50%" .nonincremental}
1) Define $f: X \to \mathbb{R}$;

2) Choose a interval covering of $f(X)$;

3) Apply a clustering on the inverse image of each interval;
:::
::::

## The Mapper graph
:::: {.columns}
::: {.column width="50%"}
![](images/mapper4.png){width=80%}
:::
::: {.column width="50%" .nonincremental}
1) Define $f: X \to \mathbb{R}$;

2) Choose a interval covering of $f(X)$;

3) Apply a clustering on the inverse image of each interval;

4) Apply the nerve construction on the sets of clusters.
:::
::::

##  {background-image="images/mapper.png" background-size="contain"}

## A humble example
::: {layout-ncol=2}
![$X$ = torus, $f$ = projection, colored by $f$.](images/mapper-torus.png)

![The mapper graph.](images/mapper-torus2.png)
:::


# Closing remarks

- Study topology;
- Study data science;
- Most important: **combine both**.

## rascunho

- Measurements of face (eyes, mouth)

- Presence of noise

- The "center" of each cluster has more points close to it

- Split it into $n$ clusters




https://vituri.github.io/TDA_with_julia/tomato.html

medições da face em fotos

eixo x e y: distância entre os olhos e tamanho da boca

uma medida real no meio e pequenos erros em volta
o meio é o centro que origina aquelas medidas próximas

distribuição normal!

# Obrigado!!

## References

<!-- http://education.knoweng.org/clustereng/algorithms.php#comparison -->
